@startuml

title __QNL's Class Diagram__\n

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyClientRouterInitializer {
        {static} - LOGGER : Logger
        - inboundChannel : Channel
        - qConfig : QNLConfiguration
        + KeyClientRouterInitializer()
        + initChannel()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyRouter {
        {static} - LOGGER : Logger
        {static} + main()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyRouterBackendHandler {
        {static} - LOGGER : Logger
        - blockByteSz : int
        - cfg : QNLConfig
        - inboundChannel : Channel
        - qConfig : QNLConfiguration
        - respQNL : QNLResponse
        + KeyRouterBackendHandler()
        + channelActive()
        + channelInactive()
        + channelRead()
        + exceptionCaught()
        - processResp()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyRouterConnectHandler {
        {static} - LOGGER : Logger
        - inboundChannel : Channel
        - outboundChannel : Channel
        - qConfig : QNLConfiguration
        - remoteHost : String
        - remotePort : int
        + KeyRouterConnectHandler()
        + channelActive()
        + channelInactive()
        + channelRead()
        + channelReadComplete()
        + exceptionCaught()
        {static} ~ closeOnFlush()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyRouterFrontendHandler {
        ~ qReq : QNLRequest
        {static} - LOGGER : Logger
        - inboundChannel : Channel
        - qConfig : QNLConfiguration
        + KeyRouterFrontendHandler()
        + channelActive()
        + channelRead()
        + channelReadComplete()
        + exceptionCaught()
        {static} ~ closeOnFlush()
        - processReq()
        - retainConnectHandler()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.KeyServerRouterInitializer {
        {static} - LOGGER : Logger
        - qConfig : QNLConfiguration
        + KeyServerRouterInitializer()
        + initChannel()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.OTPKey {
        {static} + OTPKEYNAME : String
        {static} - LOGGER : Logger
        - id : String
        - otpKey : byte[]
        - qnlConfig : QNLConfiguration
        + OTPKey()
        + otp()
        - createKey()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.QNLConfig {
        {static} + KMS : String
        + OTPConfig : Map<String, String>
        {static} + OTP_KEYBLOCKSZ : String
        - base : String
        - headerSz : int
        - keyBlockSz : int
        - keyBytesSz : int
        - kmsIP : String
        - kmsPort : int
        - port : int
        - qllBlockSz : int
        - qnlSiteKeyLoc : String
        - routeConfigLoc : String
        - siteId : String
        + getBase()
        + getHeaderSz()
        + getKeyBlockSz()
        + getKeyBytesSz()
        + getKmsIP()
        + getKmsPort()
        + getOTPKeyBlockSz()
        + getOTPKeyLoc()
        + getPort()
        + getQNLSiteKeyLoc()
        + getQllBlockSz()
        + getQnlSiteKeyLoc()
        + getRouteConfigLoc()
        + getSiteId()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.QNLConfiguration {
        {static} - LOGGER : Logger
        - config : QNLConfig
        - configLoc : String
        - otpKeyMap : Map<String, OTPKey>
        - qllClientMap : Map<String, QLLReader>
        - routeCfg : RouteConfig
        + QNLConfiguration()
        + QNLConfiguration()
        + getConfig()
        + getConfigLoc()
        + getOTPKey()
        + getQLLReader()
        + getRouteConfig()
        - createOTPKeys()
        - createQLLClients()
        - loadConfig()
    }
  }
  

  namespace com.uwaterloo.iqc.qnl {
    class com.uwaterloo.iqc.qnl.RouteConfig {
        + adjacent : Map<String, String>
        + nonAdjacent : Map<String, String>
        - lsrpRouter : LSRPRouter
        + getAdjacentId()
        + getAdjacentIdAddress()
        + getOtherAdjacentId()
        + isIdAdjacent()
        + setLSRPRouter()
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
