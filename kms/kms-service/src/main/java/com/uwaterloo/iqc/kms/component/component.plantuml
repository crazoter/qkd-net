@startuml

title __COMPONENT's Class Diagram__\n

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.ClientHandler {
        - blockByteSz : int
        - blockId : String
        - blockSz : int
        - byteSz : int
        - dstId : String
        - keys : Vector<String>
        - qResp : QNLResponse
        - srcId : String
        + ClientHandler()
        + channelActive()
        + channelInactive()
        + exceptionCaught()
        + getBlockId()
        # channelRead0()
        - processResp()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.ClientInitializer {
        - blockByteSz : int
        - blockSz : int
        - byteSz : int
        - dstId : String
        - keysDst : Vector<String>
        - kmsClientHandler : ClientHandler
        - srcId : String
        + ClientInitializer()
        + getBlockId()
        + initChannel()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.Key {
        + blockId : String
        + hexKey : String
        + index : long
        + toJsonString()
        + toString()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.KeyPool {
        - blockId : String
        - blockSz : long
        - index : AtomicLong
        - keys : Vector<String>
        + KeyPool()
        + getBlockId()
        + getKey()
        + getKey()
        + getKeys()
        + isValid()
        + resetCntr()
        + setBlockId()
        + setBlockSz()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.KeyPoolManager {
        - blockSz : long
        - byteSz : int
        - initPoolLock : ReentrantLock
        - keyPools : ConcurrentMap<String, KeyPool>
        - keyReader : QNLKeyReader
        - localSiteId : String
        {static} - logger : Logger
        - poolLocks : ConcurrentMap<String, PoolLock>
        - poolsDir : String
        - qnlIP : String
        - qnlPort : int
        + getKey()
        + getKeyBlockSize()
        + getKeyByteSize()
        + getLocalSiteId()
        + keyPoolMgr()
        + newKey()
        {static} + propertyConfigInDev()
        - containsPool()
        - containsPoolLock()
        - fetchKey()
        - key()
        - keyPoolLock()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.KeyPoolManager.PoolLock {
        ~ inProgress : boolean
        ~ lock : Lock
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    interface com.uwaterloo.iqc.kms.component.KeyReader {
        {abstract} + read()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.KeyUtils {
        {static} + SHAsum()
        {static} + byteArray2Hex()
        {static} + bytesToHexString()
        {static} + getKey()
        {static} + hexStringToBytes()
        {static} + newKey()
        {static} - keyBytes()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.PolicyEngine {
        + check()
        + policy()
    }
  }
  

  namespace com.uwaterloo.iqc.kms.component {
    class com.uwaterloo.iqc.kms.component.QNLKeyReader {
        {static} - logger : Logger
        + keyReader()
        + read()
        + read()
        - connect()
    }
  }
  

  com.uwaterloo.iqc.kms.component.KeyPoolManager +-down- com.uwaterloo.iqc.kms.component.KeyPoolManager.PoolLock


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
